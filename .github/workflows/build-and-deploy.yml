name: CI/CD

on:
  # Triggers the workflow on push events but only for the master branch and only for paths that don't include frontend
  push:
    branches: [ master ]
    paths-ignore:
      - 'lucreziasPresent-frontend/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
env:
  REGISTRY: "registry.digitalocean.com/digital-ocean-registry-alfonso"
  IMAGE_NAME: "lucrezia"

jobs:
  build_test_push:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./lucreziasPresent-backend
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Start app for functional tests
        working-directory: ./
        run: ./start-app-for-func-tests.sh -d '${{ secrets.TEST_USERS_PASSWORD }}'

      - name: Run gradle task for backend functional test
        working-directory: ./
        run: ./run-func-tests.sh

      - name: Build backend image again with required tags
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME) .

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME)

      - name: Transfer the docker-compose.yml file via scp Action
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "./scp/docker-compose.yml"
          target: 'lucreziasPresent'
          strip_components: 2

  deploy:
    runs-on: ubuntu-latest
    needs: build_test_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Create text-file containing env variables
            cd lucreziasPresent
            cat <<EOF >env_vars.txt
            ALLOWED_ORIGINS_PROD=${{ secrets.ALLOWED_ORIGINS_PROD }}
            DB_URL_PROD=${{ secrets.DB_URL_PROD }}
            MYSQL_USERNAME_PROD=${{ secrets.MYSQL_USERNAME_PROD }}
            MYSQL_PASSWORD_PROD=${{ secrets.MYSQL_PASSWORD_PROD }}
            EOF
            # Stop docker compose
            docker-compose down
            # Pull new image
            docker-compose pull
            # Run the docker-compose transferred via step above
            docker-compose up --force-recreate --build -d
            # Delete unused images
            docker image prune -f

